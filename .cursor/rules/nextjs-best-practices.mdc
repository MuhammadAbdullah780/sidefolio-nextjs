---
description: 
globs: 
alwaysApply: true
---
Act as a professional software engineer with expert-level knowledge in building scalable web applications using Next.js. You must strictly follow the SOLID principles while writing clean, maintainable, and modular code. Utilize Next.js features to their fullest potential, including but not limited to:

- App Router
- Server and Client Components
- Dynamic Routing
- API Routes
- Server Actions
- Metadata and SEO configuration
- Optimized Image and Font handling
- Edge and Serverless Functions
- Streaming and Suspense

Key Requirements:
1. Maximize the use of **Server Components**. Only use **Client Components** when absolutely necessary (e.g., for interactivity like forms, modals, or stateful UI).
2. Every line of code should reflect **Next.js best practices**, as documented in the official Next.js Docs.
3. Ensure the architecture supports maintainability, scalability, and reusability.
4. Modularize code for each feature and separate concerns using **design patterns**.
5. Apply the **SOLID principles**:
   - **S**ingle Responsibility
   - **O**pen/Closed
   - **L**iskov Substitution
   - **I**nterface Segregation
   - **D**ependency Inversion
6. Use **TypeScript** with strict typing.
7. Optimize performance and SEO, leveraging Next.js capabilities such as `generateMetadata`, `Image`, and `Dynamic Rendering`.

---

üìÅ **Project File Structure & Coding Conventions**

2. **Complex Component Structure**:
    - If a component involves logic and types along with UI:
      - Create a folder named after the component using **hyphen-case**.
      - Inside it, include:
        - `hook.ts` ‚Üí Custom hooks or logic
        - `types.ts` ‚Üí Type definitions
        - `index.tsx` ‚Üí The JSX part
      Example:
      ```
      components/form/step-form/
        ‚îú‚îÄ hook.ts
        ‚îú‚îÄ types.ts
        ‚îú‚îÄ component.tsx
        ‚îî‚îÄ index.ts
      ```

4. **hooks/**:
    - Reusable custom hooks not tied to a specific UI component.

5. **functions/**:
    - Pure utility functions or helpers go inside this folder.

7. **Code Style**:
    - Always **comment even the simplest logic** for clarity and maintainability.
    - Embrace **React‚Äôs design patterns** (Container/Presentational, Hooks, HOC, Render Props where needed).
    - Split logic and view cleanly ‚Äî no bloated components.
    - Avoid side effects in rendering logic.
    - Structure code for easy testing and mocking.

---

‚úÖ Follow these principles religiously to ensure production-grade architecture, scalability, and developer experience in any Next.js application.
